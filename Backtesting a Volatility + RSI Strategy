## This strategy trades the RSI (a mean reversion indicator) when volatility isn't extremley high
## Load libraries ##
if(!require(quantstrat)){
  install.packages("devtools")
  require(devtools)
  install_github("braverock/blotter") # dependency
  install_github("braverock/quantstrat")
  install_github('IlyaKipnis/IKTrading')
}
library(quantstrat)
library(IKTrading)
## Retrieve data ##
stocks <- c('MS') # I'm only using MS to compare the strategy against SPY. Its already been tested against many sectors + bank stocks, it just performed best on MS
initdate <- "1999-01-01"
from <- "2015-01-01"
to <- Sys.Date()
getSymbols(stocks, from = from, to = to, src = "yahoo", adjust = TRUE)
## Settings ##
.stoploss <- .06
.txnfees <- .0
stoploss_enabled <- TRUE
initialequity <- 100000
tradesize <- initialequity / length(stocks)
## Functions ##
# Derives volatility from Bollinger Bands
VolatilityBands <- function(HLC, n = 20, maType = 'SMA', sd = 2){
  BBands <- BBands(HLC = HLC, n = n, maType = maType, sd = sd)
  BBands$volatility <- BBands$up - BBands$dn
  BBands$volatilityrank <- runPercentRank(BBands$volatility)
  return(BBands)
}
## Initialize Portfolio Objects ##
Sys.setenv(TZ = "UTC")
currency("USD")
for(stock in stocks) {
  stock(stock, currency = "USD", multiplier = 1)
}
strategy.st <- portfolio.st <- account.st <- "backtest"
rm.strat(strategy.st)
initPortf(portfolio.st, symbols = stocks, initDate = initdate, currency = "USD")
initAcct(account.st, portfolios = portfolio.st, symbols = stocks, initDate = initdate, currency = "USD", initEq = initialequity)
initOrders(portfolio.st, initDate = initdate)
for(stock in stocks) {
  addPosLimit(portfolio.st, symbol = stock, timestamp = initdate, maxpos = 1, minpos = -1)
  
}
strategy(strategy.st, store = TRUE)
## Add Indicators to Strategy ##
add.indicator(strategy.st, name = "VolatilityBands", arguments = list(HLC = quote(Cl(mktdata)), n = 20, maType = 'SMA', sd = 2), label = "BBands")
add.indicator(strategy.st, name = "RSI", arguments = list(price = quote(Cl(mktdata)), n = 4), label = "RSI14")
# Test indicators 
test <- applyIndicators(strategy= strategy.st, mktdata = OHLC(MS))
head(test)
## Add Signals to Strategy
add.signal(strategy.st, name = "sigThreshold", arguments = list(column = c("RSI14"), threshold = 30, relationship = "gt", cross = TRUE), label = "oversold")
add.signal(strategy.st, name = "sigThreshold", arguments = list(column = c("RSI14"), threshold = 80, relationship = "gte", cross = TRUE), label = "overbought")
add.signal(strategy.st, name = "sigThreshold", arguments = list(column = c("volatilityrank"), threshold = .9, relationship = "lt", cross = FALSE), label = "lowvolatility")
add.signal(strategy.st, name = "sigThreshold", arguments = list(column = c("volatilityrank"), threshold = .9, relationship = "gt", cross = FALSE), label = "highvolatility")
add.signal(strategy.st, name = "sigFormula", arguments = list(formula = "oversold & lowvolatility", cross = TRUE), label = "longentry")
add.signal(strategy.st, name = "sigFormula", arguments = list(formula = "overbought | highvolatility", cross = TRUE), label = "longexit")
## Add Rules to Strategy
add.rule(strategy.st, name = "ruleSignal", arguments = list(sigcol = "longentry", sigval = TRUE, ordertype = "market", orderside = "long", replace = FALSE, TxnFees = .txnfees, prefer = "Close", orderset = "longrule", osFUN = osMaxDollar, tradeSize = tradesize, maxSize = tradesize),  type = "enter", label = "longenter")
add.rule(strategy.st, name = "ruleSignal", arguments = list(sigcol = "longexit", sigval = TRUE, orderqty = "all", ordertype = "market", orderside = "long", replace = FALSE, TxnFees = .txnfees, prefer = "Close", orderset = "longrule"), type = "exit", label = "longexit")
add.rule(strategy.st, name = "ruleSignal", arguments = list(sigcol = "longexit", sigval = TRUE, orderqty = "all", ordertype = "stoplimit", tmult = TRUE, threshold = quote(.stoploss), orderside = "long", replace = FALSE, TxnFees = .txnfees, prefer = "Close", orderset = "longrule"), type = "chain", parent = "longenter", label = "longstop", enabled = FALSE)
if(stoploss_enabled == TRUE) {
enable.rule(strategy.st, 
            type = "chain", 
            label = "longstop")
}
## Apply Strategy ##
applyStrategy(strategy = strategy.st, portfolios = portfolio.st)
updatePortf(portfolio.st)
daterange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, daterange)
updateEndEq(account.st)
## Trade Stats ##
tradeStats(Portfolios = portfolio.st)
portPL <- .blotter$portfolio.backtest$summary$Net.Trading.PL
SharpeRatio.annualized(portPL, geometric = FALSE) #Profit/Loss Sharpe
chart.Posn(Portfolio=portfolio.st,Symbol=stock)
final_acct <- getAccount(account.st)
plot(final_acct$summary$End.Eq["2010/2022-10-23"], main = "Portfolio Equity Curve")
## Calculate annualized trade stats + return based sharpe ratio
getSymbols('SPY', from = from, to = to) #Benchmarking against SPY
rets <- Return.calculate(final_acct$summary$End.Eq)
msrets <- Return.calculate(Cl(MS))
spyrets <- Return.calculate(Cl(SPY))
ms <- c(StdDev.annualized(msrets) * 100, Return.annualized(msrets) * 100, SharpeRatio.annualized(msrets))
spy <- c(StdDev.annualized(spyrets) * 100, Return.annualized(spyrets) * 100, SharpeRatio.annualized(spyrets))
strat <- c(StdDev.annualized(rets) * 100, Return.annualized(rets) * 100, SharpeRatio.annualized(rets))
additional_trade_stats <- data.frame(ms, spy, strat)
row.names(additional_trade_stats) <- c('Annualized Std Dev %', 'Annualized Return %', 'Sharpe Ratio')
additional_trade_stats
