## This backtest will inverse the long strategy by shorting downtrending financial stocks at overbought conditions.
## Load libraries ##
if(!require(quantstrat)){
  install.packages("devtools")
  require(devtools)
  install_github("braverock/blotter") # dependency
  install_github("braverock/quantstrat")
  install_github('IlyaKipnis/IKTrading')
}
library(quantstrat)
library(IKTrading)
## Retrieve data ##
stocks <- c('CS', 'HOOD', 'UBS', 'SOFI') 
initdate <- "1999-01-01"
from <- "2013-01-01"
to <- Sys.Date()
getSymbols(stocks, from = from, to = to, src = "yahoo", adjust = TRUE)
## Settings ##
.stoploss <- .06
.txnfees <- .0 # To be calculated!!
stoploss_enabled <- TRUE
initialequity <- 0
tradesize <- initialequity / length(stocks)
## Initialize Portfolio Objects ##
Sys.setenv(TZ = "UTC")
currency("USD")
for(stock in stocks) {
  stock(stock, currency = "USD", multiplier = 1)
}
strategy.st <- portfolio.st <- account.st <- "backtest"
rm.strat(strategy.st)
initPortf(portfolio.st, symbols = stocks, initDate = initdate, currency = "USD")
initAcct(account.st, portfolios = portfolio.st, symbols = stocks, initDate = initdate, currency = "USD", initEq = initialequity)
initOrders(portfolio.st, initDate = initdate)
for(stock in stocks) {
  addPosLimit(portfolio.st, symbol = stock, timestamp = initdate, minpos = -1)
  
}
strategy(strategy.st, store = TRUE)
## Add Indicators to Strategy ##
add.indicator(strategy.st, name = "RSI", arguments = list(price = quote(Cl(mktdata)), n = 4), label = "RSI14")
# Test indicators 
test <- applyIndicators(strategy= strategy.st, mktdata = OHLC(UBS))
head(test)
## Add Signals to Strategy
add.signal(strategy.st, name = "sigThreshold", arguments = list(column = c("RSI14"), threshold = 30, relationship = "gt", cross = TRUE), label = "oversold")
add.signal(strategy.st, name = "sigThreshold", arguments = list(column = c("RSI14"), threshold = 80, relationship = "gte", cross = TRUE), label = "overbought")

## Add Rules to Strategy

add.rule(strategy.st, name = "ruleSignal", arguments = list(sigcol = "overbought", sigval = TRUE, osFUN = osMaxPos, orderqty = -10, ordertype = "market", orderside = "short", replace = FALSE, prefer = "Close", orderset = "shortrule"), type = "enter", label = "shortenter")
add.rule(strategy.st, name = "ruleSignal", arguments = list(sigcol = "oversold", sigval = TRUE, orderqty = "all", ordertype = "market", orderside = "short", replace = FALSE, prefer = "Close", orderset = "shortrule"), type = "exit", label = "shortexit")
add.rule(strategy.st, name = "ruleSignal", arguments = list(sigcol = "oversold", sigval = TRUE, orderqty = "all", ordertype = "stoplimit", tmult = TRUE, threshold = quote(.stoploss), orderside = "short", replace = FALSE, prefer = "Close", orderset = "shortrule"), type = "chain", parent = "shortenter", label = "shortstop", enabled = FALSE)
enable.rule(strategy.st, 
            type = "chain", 
            label = "shortstop")

## Apply Strategy ##
applyStrategy(strategy = strategy.st, portfolios = portfolio.st)
updatePortf(portfolio.st)
daterange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(account.st, daterange)
updateEndEq(account.st)
## Trade Stats ##
tradeStats(Portfolios = portfolio.st)
portPL <- .blotter$portfolio.backtest$summary$Net.Trading.PL
SharpeRatio.annualized(portPL, geometric = FALSE) #Profit/Loss Sharpe
for(stock in stocks){
chart.Posn(Portfolio=portfolio.st,Symbol=stock)
}
final_acct <- getAccount(account.st)
plot(final_acct$summary$End.Eq["2010/2022-10-23"], main = "Portfolio Equity Curve")
